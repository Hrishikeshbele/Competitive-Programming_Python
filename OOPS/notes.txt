> this folder contains codes related to OOPS concepts.
> Consider a module to be the same as a python file. A file containing a set of functions you want to include in your application.
> class variable is shared by all class objects created.its value will be same for all objs.
> private variable is accessible within same class only, you can't access it from different class.private methods work same as private vars.(use __ convection to declare private var,methods) 
> main goal of Abstraction is to handle complexity by hiding unnecessary details from the user. That enables the user to implement more complex logic on top of the provided abstraction without understanding or even thinking about all the hidden complexity
> Encapsulation: language mechanism for restricting direct access to some of the object's components.
> in inheritance, when we call method using child class obj then it searches for it in child class first and if not present then it 
 searches for it in parents class.
> if you pass 2 values to class constructor var with same obj name then 2nd val will overwrite 1st val like int var.(a = A(10);a = A(20) o/t: 20)
> super().__init__() : call contructor of parents class 
> (object) is parent class of all the classses we create in python. object class has buildin init constructor.there is special functn in object class called __str__() which contain code to convert object into string for printing.
> in multiple inheritance case, search for functns,atrbs happens as depth-first, left to right in parents classes
> abstract class have atleast one abstract method.An abstraction denotes the essential characteristics of an object that distinguish it from all other kinds of objects.
> abstact methods are not implemented in abstract class they are only defined there and implemented in child class of abstract class. we can't create obj for abstract class directly.
