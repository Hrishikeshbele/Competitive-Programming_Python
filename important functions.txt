>set: unordered,iterable,no-duplicates ; tuple: immutable,ordered
1. str_name.replace('.', '[.]')  # '.' will be replaced by '[.]' at all places in str_name
2. list.insert(index, elem) #insert elm in list at perticular index
3. str.lower(): converts string chars to lower-case
4. math.inf (#after puthon 3.5) or float("inf") : to represent infinite number
5. iter(list) : coverts object into iterator
6. str.find(elm) : returns index of elm if present else returns -1.
7. str.index(elm) : returns index of elm if present else throws an exception.
8. list[:, 0] >0 : returns True or False or equivalently 1(True) and 0(False)
9. str.endswith('geeks'):returns True if a string ends with the given suffix otherwise returns False.
10.print(*list): print list elements in one line
11.sum(z<i for z in nums): count the no of true cases in returned list
12.print('in {n} i got {m}'.format(n='math',m=89): printing using explicit name(no ordering req)
13.dict.fromkeys(list(runs),0): creating dict with list as key and all vallues as 0
14.[f(x) for x in list if condtn],[f(x) if condtn else g(x) for x in list]: list comprehension
15.ord(a): to get ascii value of a
16.string.replace(old, new):returns a copy of the string where all occurrences of a substring(old) is replaced with another substring(new).
17. neg=x<0 : will store boolen value corrsp to result
18. int('00010',2) : it will convert binary number to interger
19. bin(int)[2:] : will return binary representation of integer number
20. bin(num)[2:].zfill(32) : fill the remaining bit with 0 to make it 32 bit representation.
21. list.extend([4, 5]) : extend the list and add passed list at end
22. string.isalnum() : return true if all char in str are either numbers or alphabets false otherwise
23. string.isalpha() : return true if all char in str are either lower or upper char alphabets
24. string.isdigit() :  returns true if all characters in the string are digits
25. chr(num) : returns Character of given ASCII value
26. print(*[2,3,4]) : prints the elm of list in one line
27. print('%.2f'%a),print("{0:.2f}".format(a)),print(round(a,2)) :printing a upto 2 decimal places
